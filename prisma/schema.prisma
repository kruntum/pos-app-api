// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id() @default(autoincrement())
  name     String
  username String // @unique()
  password String
  level    String @default("admin")
  status   String @default("use")
  BillSale BillSale[]
}

model FoodType {
  id        Int        @id() @default(autoincrement())
  name      String
  remark    String?
  status    String     @default("use") // use, delete
  FoodSizes FoodSize[]
  Tastes    Taste[]
  Foods     Food[]
}

model FoodSize {
  id              Int              @id() @default(autoincrement())
  name            String
  remark          String
  foodTypeId      Int
  moneyAdded      Int
  status          String           @default("use")
  FoodType        FoodType         @relation(fields: [foodTypeId], references: [id])
  SaleTempDetails SaleTempDetail[]
  BillSaleDetails BillSaleDetail[]
}

model Taste {
  id              Int              @id() @default(autoincrement())
  name            String
  remark          String
  status          String           @default("use")
  foodTypeId      Int
  FoodType        FoodType         @relation(fields: [foodTypeId], references: [id])
  SaleTempDetails SaleTempDetail[]
  BillSaleDetails BillSaleDetail[]
}

model Food {
  id              Int              @id() @default(autoincrement())
  name            String
  img             String
  remark          String
  status          String           @default("use")
  price           Int
  foodType        String           @default("food") // food, drink
  foodTypeId      Int
  FoodType        FoodType         @relation(fields: [foodTypeId], references: [id])
  SaleTempDetails SaleTempDetail[]
  SaleTemp SaleTemp[]
  BillSaleDetails BillSaleDetail[]
}

model SaleTemp {
  id              Int              @id() @default(autoincrement())
  userId          Int
  tableNo         Int
foodId Int
qty Int
  SaleTempDetails SaleTempDetail[]
  Food Food @relation(fields: [foodId],references: [id])
}

model SaleTempDetail {
  id         Int       @id() @default(autoincrement())
  saleTempId Int
  foodId     Int
  tasteId    Int?
  foodSizeId Int?
  Food       Food      @relation(fields: [foodId], references: [id])
  Taste      Taste?    @relation(fields: [tasteId], references: [id])
  FoodSize   FoodSize? @relation(fields: [foodSizeId], references: [id])
  SaleTemp   SaleTemp  @relation(fields: [saleTempId], references: [id])
}
model Organization {
  id Int @id() @default(autoincrement())
  name String 
  phone String 
  address String 
  email String 
  website String 
  promptpay String 
  logo String 
  taxCode String 
}

model BillSale {
  id Int @id() @default(autoincrement())
  createdDate DateTime @default(now())
  payDate DateTime @default(now())
  amount Int 
  payType String 
  userId Int 
  inputMoney Int 
  returnMoney Int 
  tableNo Int 
  filebillUrl String?
  status String @default("use")
  User User @relation(fields: [userId], references: [id])
  BillSaleDetails BillSaleDetail[]
}

model BillSaleDetail {
  id Int @id() @default(autoincrement())
  billSaleId Int 
  foodId Int 
  tasteId Int? 
  foodSizeId Int? 
  moneyAdded Int? 
  price Int?
  Food Food @relation(fields: [foodId], references: [id])
  BillSale BillSale @relation(fields: [billSaleId], references: [id])
  FoodSize FoodSize? @relation(fields: [foodSizeId], references: [id])
  Taste Taste? @relation(fields: [tasteId], references: [id])
}